
// Generated by dojo-bindgen on Thu, 7 Nov 2024 00:42:49 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `jokers_ls_mod-game_system` contract
    function game_system() {
        const contract_name = "game_system";

        
        // Call the `create_game` system with the specified Account and calldata
        const create_game = async (props: { account: Account, player_name: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_game",
                        calldata: [props.player_name],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing create_game:", error);
                throw error;
            }
        };
            

    
        // Call the `create_level` system with the specified Account and calldata
        const create_level = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_level",
                        calldata: [props.game_id],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing create_level:", error);
                throw error;
            }
        };
            

    
        // Call the `create_reward` system with the specified Account and calldata
        const create_reward = async (props: { account: Account, game_id: number, reward_index: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_reward",
                        calldata: [props.game_id,
                props.reward_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing create_reward:", error);
                throw error;
            }
        };
            

    
        // Call the `select_reward` system with the specified Account and calldata
        const select_reward = async (props: { account: Account, game_id: number, cards_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "select_reward",
                        calldata: [props.game_id,
                            props.cards_index.length,
                ...props.cards_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing select_reward:", error);
                throw error;
            }
        };
            

    
        // Call the `select_deck` system with the specified Account and calldata
        const select_deck = async (props: { account: Account, game_id: number, deck_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "select_deck",
                        calldata: [props.game_id,
                props.deck_id],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing select_deck:", error);
                throw error;
            }
        };
            

    
        // Call the `select_special_cards` system with the specified Account and calldata
        const select_special_cards = async (props: { account: Account, game_id: number, cards_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "select_special_cards",
                        calldata: [props.game_id,
                            props.cards_index.length,
                            ...props.cards_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing select_special_cards:", error);
                throw error;
            }
        };
            

    
        // Call the `select_modifier_cards` system with the specified Account and calldata
        const select_modifier_cards = async (props: { account: Account, game_id: number, cards_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "select_modifier_cards",
                        calldata: [props.game_id,
                            props.cards_index.length,
                            ...props.cards_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing select_modifier_cards:", error);
                throw error;
            }
        };
            

    
        // Call the `play` system with the specified Account and calldata
        const play = async (props: { account: Account, game_id: number, cards_index: number[], modifiers_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "play",
                        calldata: [props.game_id,
                            props.cards_index.length,
                            ...props.cards_index,
                            props.modifiers_index.length,
                            ...props.modifiers_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing play:", error);
                throw error;
            }
        };
            

    
        // Call the `discard` system with the specified Account and calldata
        const discard = async (props: { account: Account, game_id: number, cards_index: number[], modifiers_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "discard",
                        calldata: [props.game_id,
                            props.cards_index.length,
                            ...props.cards_index,
                            props.modifiers_index.length,
                            ...props.modifiers_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing discard:", error);
                throw error;
            }
        };
            

    
        // Call the `end_turn` system with the specified Account and calldata
        const end_turn = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "end_turn",
                        calldata: [props.game_id],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing end_turn:", error);
                throw error;
            }
        };
            

    
        // Call the `discard_effect_card` system with the specified Account and calldata
        const discard_effect_card = async (props: { account: Account, game_id: number, card_index: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "discard_effect_card",
                        calldata: [props.game_id,
                props.card_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing discard_effect_card:", error);
                throw error;
            }
        };
            

    
        // Call the `discard_special_card` system with the specified Account and calldata
        const discard_special_card = async (props: { account: Account, game_id: number, special_card_index: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "discard_special_card",
                        calldata: [props.game_id,
                props.special_card_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing discard_special_card:", error);
                throw error;
            }
        };
            

    
        // Call the `use_adventurer` system with the specified Account and calldata
        const use_adventurer = async (props: { account: Account, game_id: number, adventurer_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "use_adventurer",
                        calldata: [props.game_id,
                props.adventurer_id],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing use_adventurer:", error);
                throw error;
            }
        };
            

    
        // Call the `skip_adventurer` system with the specified Account and calldata
        const skip_adventurer = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "skip_adventurer",
                        calldata: [props.game_id],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing skip_adventurer:", error);
                throw error;
            }
        };
            

    
        // Call the `select_aventurer_cards` system with the specified Account and calldata
        const select_aventurer_cards = async (props: { account: Account, game_id: number, cards_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "select_aventurer_cards",
                        calldata: [props.game_id,
                            props.cards_index.length,
                            ...props.cards_index],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing select_aventurer_cards:", error);
                throw error;
            }
        };
            

    
        // Call the `skip_unpassed_obstacle` system with the specified Account and calldata
        const skip_unpassed_obstacle = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "skip_unpassed_obstacle",
                        calldata: [props.game_id],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing skip_unpassed_obstacle:", error);
                throw error;
            }
        };
            

    
        // Call the `name` system with the specified Account and calldata
        const name = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "name",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing name:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

        return {
            create_game, create_level, create_reward, select_reward, select_deck, select_special_cards, select_modifier_cards, play, discard, end_turn, discard_effect_card, discard_special_card, use_adventurer, skip_adventurer, select_aventurer_cards, skip_unpassed_obstacle, name, world
        };
    }

    // System definitions for `jokers_ls_mod-player_system` contract
    function player_system() {
        const contract_name = "player_system";

        
        // Call the `name` system with the specified Account and calldata
        const name = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "name",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing name:", error);
                throw error;
            }
        };
            

    
        // Call the `get_game` system with the specified Account and calldata
        const get_game = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_game",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_game:", error);
                throw error;
            }
        };
            

    
        // Call the `get_adventurer` system with the specified Account and calldata
        const get_adventurer = async (props: { adventurer_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_adventurer",
                        calldata: [props.adventurer_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_adventurer:", error);
                throw error;
            }
        };
            

    
        // Call the `get_player_current_hand` system with the specified Account and calldata
        const get_player_current_hand = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_player_current_hand",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_player_current_hand:", error);
                throw error;
            }
        };
            

    
        // Call the `get_game_mode_beast` system with the specified Account and calldata
        const get_game_mode_beast = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_game_mode_beast",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_game_mode_beast:", error);
                throw error;
            }
        };
            

    
        // Call the `get_beast` system with the specified Account and calldata
        const get_beast = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_beast",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_beast:", error);
                throw error;
            }
        };
            

    
        // Call the `get_player_beast` system with the specified Account and calldata
        const get_player_beast = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_player_beast",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_player_beast:", error);
                throw error;
            }
        };
            

    
        // Call the `get_challenge` system with the specified Account and calldata
        const get_challenge = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_challenge",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_challenge:", error);
                throw error;
            }
        };
            

    
        // Call the `get_challenge_player` system with the specified Account and calldata
        const get_challenge_player = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_challenge_player",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_challenge_player:", error);
                throw error;
            }
        };
            
        // Call the `get_reward` system with the specified Account and calldata
        const get_reward = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_reward",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_reward:", error);
                throw error;
            }
        };
            

    
        // Call the `get_blister_pack_result` system with the specified Account and calldata
        const get_blister_pack_result = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_blister_pack_result",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_blister_pack_result:", error);
                throw error;
            }
        };
            

    
        // Call the `get_current_special_cards` system with the specified Account and calldata
        const get_current_special_cards = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_current_special_cards",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_current_special_cards:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

        return {
            name, get_game, get_adventurer, get_player_current_hand, get_game_mode_beast, get_beast, get_player_beast, get_challenge, get_challenge_player, get_reward, get_blister_pack_result, get_current_special_cards, world
        };
    }

    // System definitions for `jokers_ls_mod-poker_hand_system` contract
    function poker_hand_system() {
        const contract_name = "poker_hand_system";

        
        // Call the `name` system with the specified Account and calldata
        const name = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "name",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing name:", error);
                throw error;
            }
        };
            

    
        // Call the `get_player_poker_hands` system with the specified Account and calldata
        const get_player_poker_hands = async (props: { game_id: number }) => {
            try {
                return await provider.call(
                    "jokers_ls_mod",
                    {
                        contractName: contract_name,
                        entrypoint: "get_player_poker_hands",
                        calldata: [props.game_id],
                    },
                );
            } catch (error) {
                console.error("Error executing get_player_poker_hands:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

        return {
            name, get_player_poker_hands, world
        };
    }

    // System definitions for `jokers_ls_mod-rage_system` contract
    function rage_system() {
        const contract_name = "rage_system";

        
        // Call the `name` system with the specified Account and calldata
        const name = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "name",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing name:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

    
        // Call the `calculate` system with the specified Account and calldata
        const calculate = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "calculate",
                        calldata: [props.game_id],
                    },
                    "jokers_ls_mod"
                );
            } catch (error) {
                console.error("Error executing calculate:", error);
                throw error;
            }
        };
            

        return {
            name, world, calculate
        };
    }

    return {
        game_system: game_system(),
        player_system: player_system(),
        poker_hand_system: poker_hand_system(),
        rage_system: rage_system()
    };
}
