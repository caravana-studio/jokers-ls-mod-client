
// Generated by dojo-bindgen on Wed, 6 Nov 2024 22:17:52 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `jokers_ls_mod::models::data::adventurer::AdventurerConsumed` struct
export interface AdventurerConsumed {
    adventurer_id: Number;
    owner: BigInt;
    consumed: Boolean;
    
}
export const AdventurerConsumedDefinition = {
    adventurer_id: RecsType.Number,
    owner: RecsType.BigInt,
    consumed: RecsType.Boolean,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};


// Type definition for `jokers_ls_mod::models::data::beast::TypeBeast` enum
export type TypeBeast = { type: 'LOOT_SURVIVOR'; } | { type: 'JOKERS_OF_NEON'; };

export const TypeBeastDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `jokers_ls_mod::models::data::beast::Beast` struct
export interface Beast {
    game_id: Number;
    beast_id: Number;
    tier: Number;
    level: Number;
    health: Number;
    current_health: Number;
    attack: Number;
    type_beast: TypeBeast;
    
}
export const BeastDefinition = {
    game_id: RecsType.Number,
    beast_id: RecsType.Number,
    tier: RecsType.Number,
    level: RecsType.Number,
    health: RecsType.Number,
    current_health: RecsType.Number,
    attack: RecsType.Number,
    type_beast: TypeBeastDefinition,
    
};


// Type definition for `jokers_ls_mod::models::data::events::BeastAttack` struct
export interface BeastAttack {
    player: BigInt;
    attack: Number;
    
}
export const BeastAttackDefinition = {
    player: RecsType.BigInt,
    attack: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::status::shop::shop::BlisterPackItem` struct
export interface BlisterPackItem {
    game_id: Number;
    idx: Number;
    blister_pack_id: Number;
    cost: Number;
    purchased: Boolean;
    
}
export const BlisterPackItemDefinition = {
    game_id: RecsType.Number,
    idx: RecsType.Number,
    blister_pack_id: RecsType.Number,
    cost: RecsType.Number,
    purchased: RecsType.Boolean,
    
};

// Type definition for `jokers_ls_mod::models::status::shop::shop::BlisterPackResult` struct
export interface BlisterPackResult {
    game_id: Number;
    cards_picked: Boolean;
    cards: Number[];
}

export const BlisterPackResultDefinition = {
    game_id: RecsType.Number,
    cards_picked: RecsType.Boolean,
    cards: RecsType.NumberArray,
    
};


// Type definition for `jokers_ls_mod::models::data::events::BuyBlisterPackEvent` struct
export interface BuyBlisterPackEvent {
    game_id: Number;
    level: Number;
    idx: Number;
    blister_pack_id: Number;
    
}
export const BuyBlisterPackEventDefinition = {
    game_id: RecsType.Number,
    level: RecsType.Number,
    idx: RecsType.Number,
    blister_pack_id: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::status::shop::shop::CardItemType` enum
export type CardItemType = { type: 'None'; } | { type: 'Common'; } | { type: 'Modifier'; } | { type: 'Special'; };

export const CardItemTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `jokers_ls_mod::models::data::events::BuyCardEvent` struct
export interface BuyCardEvent {
    game_id: Number;
    level: Number;
    idx: Number;
    item_type: CardItemType;
    card_id: Number;
    temporary: Boolean;
    
}
export const BuyCardEventDefinition = {
    game_id: RecsType.Number,
    level: RecsType.Number,
    idx: RecsType.Number,
    item_type: CardItemTypeDefinition,
    card_id: RecsType.Number,
    temporary: RecsType.Boolean,
    
};


// Type definition for `jokers_ls_mod::models::data::poker_hand::PokerHand` enum
export type PokerHand = { type: 'None'; } | { type: 'RoyalFlush'; } | { type: 'StraightFlush'; } | { type: 'FiveOfAKind'; } | { type: 'FourOfAKind'; } | { type: 'FullHouse'; } | { type: 'Straight'; } | { type: 'Flush'; } | { type: 'ThreeOfAKind'; } | { type: 'TwoPair'; } | { type: 'OnePair'; } | { type: 'HighCard'; };

export const PokerHandDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `jokers_ls_mod::models::data::events::BuyPokerHandEvent` struct
export interface BuyPokerHandEvent {
    game_id: Number;
    level: Number;
    idx: Number;
    poker_hand: PokerHand;
    level_hand: Number;
    
}
export const BuyPokerHandEventDefinition = {
    game_id: RecsType.Number,
    level: RecsType.Number,
    idx: RecsType.Number,
    poker_hand: PokerHandDefinition,
    level_hand: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::BuyRerollEvent` struct
export interface BuyRerollEvent {
    game_id: Number;
    level: Number;
    reroll_cost: Number;
    reroll_executed: Boolean;
    
}
export const BuyRerollEventDefinition = {
    game_id: RecsType.Number,
    level: RecsType.Number,
    reroll_cost: RecsType.Number,
    reroll_executed: RecsType.Boolean,
    
};


// Type definition for `jokers_ls_mod::models::status::shop::shop::CardItem` struct
export interface CardItem {
    game_id: Number;
    idx: Number;
    item_type: CardItemType;
    card_id: Number;
    cost: Number;
    purchased: Boolean;
    temporary: Boolean;
    
}
export const CardItemDefinition = {
    game_id: RecsType.Number,
    idx: RecsType.Number,
    item_type: CardItemTypeDefinition,
    card_id: RecsType.Number,
    cost: RecsType.Number,
    purchased: RecsType.Boolean,
    temporary: RecsType.Boolean,
    
};


// Type definition for `jokers_ls_mod::models::data::events::CardScoreEvent` struct
export interface CardScoreEvent {
    player: BigInt;
    index: Number;
    multi: Number;
    points: Number;
    
}
export const CardScoreEventDefinition = {
    player: RecsType.BigInt,
    index: RecsType.Number,
    multi: RecsType.Number,
    points: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::challenge::Challenge` struct
export interface Challenge {
    game_id: Number;
    active_ids: String[];
    
}
export const ChallengeDefinition = {
    game_id: RecsType.Number,
    active_ids: RecsType.StringArray,
    
};


// Type definition for `jokers_ls_mod::models::data::events::ChallengeCompleted` struct
export interface ChallengeCompleted {
    player: BigInt;
    player_name: BigInt;
    game_id: Number;
    
}
export const ChallengeCompletedDefinition = {
    player: RecsType.BigInt,
    player_name: RecsType.BigInt,
    game_id: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::challenge::ChallengePlayer` struct
export interface ChallengePlayer {
    game_id: Number;
    discards: Number;
    plays: Number;
    
}
export const ChallengePlayerDefinition = {
    game_id: RecsType.Number,
    discards: RecsType.Number,
    plays: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::CreateGameEvent` struct
export interface CreateGameEvent {
    player: BigInt;
    game_id: Number;
    
}
export const CreateGameEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::status::round::current_hand_card::CurrentHandCard` struct
export interface CurrentHandCard {
    game_id: Number;
    idx: Number;
    card_id: Number;
    
}
export const CurrentHandCardDefinition = {
    game_id: RecsType.Number,
    idx: RecsType.Number,
    card_id: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::status::game::game::CurrentSpecialCards` struct
export interface CurrentSpecialCards {
    game_id: Number;
    idx: Number;
    effect_card_id: Number;
    is_temporary: Boolean;
    remaining: Number;
    
}
export const CurrentSpecialCardsDefinition = {
    game_id: RecsType.Number,
    idx: RecsType.Number,
    effect_card_id: RecsType.Number,
    is_temporary: RecsType.Boolean,
    remaining: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::game_deck::DeckCard` struct
export interface DeckCard {
    game_id: Number;
    index: Number;
    card_id: Number;
    
}
export const DeckCardDefinition = {
    game_id: RecsType.Number,
    index: RecsType.Number,
    card_id: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::DetailEarnedEvent` struct
export interface DetailEarnedEvent {
    player: BigInt;
    game_id: Number;
    round_defeat: Number;
    level_bonus: Number;
    hands_left: Number;
    hands_left_cash: Number;
    discard_left: Number;
    discard_left_cash: Number;
    rage_card_defeated: Number;
    rage_card_defeated_cash: Number;
    total: Number;
    
}
export const DetailEarnedEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    round_defeat: RecsType.Number,
    level_bonus: RecsType.Number,
    hands_left: RecsType.Number,
    hands_left_cash: RecsType.Number,
    discard_left: RecsType.Number,
    discard_left_cash: RecsType.Number,
    rage_card_defeated: RecsType.Number,
    rage_card_defeated_cash: RecsType.Number,
    total: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::status::game::game::GameState` enum
export type GameState = { type: 'IN_GAME'; } | { type: 'FINISHED'; };

export const GameStateDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `jokers_ls_mod::models::status::game::game::GameSubState` enum
export type GameSubState = { type: 'BEAST'; } | { type: 'OBSTACLE'; } | { type: 'CREATE_LEVEL'; } | { type: 'CREATE_REWARD'; } | { type: 'REWARD_SPECIALS'; } | { type: 'REWARD_CARDS_PACK'; } | { type: 'DRAFT_MODIFIERS'; } | { type: 'DRAFT_SPECIALS'; } | { type: 'DRAFT_DECK'; } | { type: 'DRAFT_ADVENTURER'; } | { type: 'DRAFT_ADVENTURER_CARDS'; } | { type: 'UNPASSED_OBSTACLE'; };

export const GameSubStateDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `jokers_ls_mod::models::status::game::game::Game` struct
export interface Game {
    id: Number;
    owner: BigInt;
    player_name: BigInt;
    player_hp: Number;
    player_score: Number;
    player_level: Number;
    obstacles_cleared: Number;
    beasts_defeated: Number;
    current_player_hp: Number;
    max_hands: Number;
    max_discard: Number;
    max_jokers: Number;
    level: Number;
    len_hand: Number;
    len_max_current_special_cards: Number;
    len_current_special_cards: Number;
    current_jokers: Number;
    state: GameState;
    substate: GameSubState;
    
}
export const GameDefinition = {
    id: RecsType.Number,
    owner: RecsType.BigInt,
    player_name: RecsType.BigInt,
    player_hp: RecsType.Number,
    player_score: RecsType.Number,
    player_level: RecsType.Number,
    obstacles_cleared: RecsType.Number,
    beasts_defeated: RecsType.Number,
    current_player_hp: RecsType.Number,
    max_hands: RecsType.Number,
    max_discard: RecsType.Number,
    max_jokers: RecsType.Number,
    level: RecsType.Number,
    len_hand: RecsType.Number,
    len_max_current_special_cards: RecsType.Number,
    len_current_special_cards: RecsType.Number,
    current_jokers: RecsType.Number,
    state: GameStateDefinition,
    substate: GameSubStateDefinition,
    
};


// Type definition for `jokers_ls_mod::models::data::game_deck::GameDeck` struct
export interface GameDeck {
    game_id: Number;
    len: Number;
    round_len: Number;
    
}
export const GameDeckDefinition = {
    game_id: RecsType.Number,
    len: RecsType.Number,
    round_len: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::beast::GameModeBeast` struct
export interface GameModeBeast {
    game_id: Number;
    cost_discard: Number;
    cost_play: Number;
    energy_max_player: Number;
    
}
export const GameModeBeastDefinition = {
    game_id: RecsType.Number,
    cost_discard: RecsType.Number,
    cost_play: RecsType.Number,
    energy_max_player: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::ItemChallengeCompleted` struct
export interface ItemChallengeCompleted {
    game_id: Number;
    challenge_id: Number;
    
}
export const ItemChallengeCompletedDefinition = {
    game_id: RecsType.Number,
    challenge_id: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::last_beast_level::LastBeastLevel` struct
export interface LastBeastLevel {
    game_id: Number;
    current_probability: Number;
    level: Number;
    
}
export const LastBeastLevelDefinition = {
    game_id: RecsType.Number,
    current_probability: RecsType.Number,
    level: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::card::Suit` enum
export type Suit = { type: 'None'; } | { type: 'Clubs'; } | { type: 'Diamonds'; } | { type: 'Hearts'; } | { type: 'Spades'; } | { type: 'Joker'; };

export const SuitDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `jokers_ls_mod::models::data::events::ModifierCardSuitEvent` struct
export interface ModifierCardSuitEvent {
    player: BigInt;
    game_id: Number;
    modifier_card_idx: Number;
    current_hand_card_idx: Number;
    suit: Suit;
    
}
export const ModifierCardSuitEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    modifier_card_idx: RecsType.Number,
    current_hand_card_idx: RecsType.Number,
    suit: SuitDefinition,
    
};


// Type definition for `jokers_ls_mod::models::data::events::NeonPokerHandEvent` struct
export interface NeonPokerHandEvent {
    player: BigInt;
    game_id: Number;
    neon_cards_idx: Number[];
    multi: Number;
    points: Number;
    
}
export const NeonPokerHandEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    neon_cards_idx: RecsType.NumberArray,
    multi: RecsType.Number,
    points: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::ObstacleAttack` struct
export interface ObstacleAttack {
    player: BigInt;
    attack: Number;
    
}
export const ObstacleAttackDefinition = {
    player: RecsType.BigInt,
    attack: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::PlayGameOverEvent` struct
export interface PlayGameOverEvent {
    player: BigInt;
    game_id: Number;
    
}
export const PlayGameOverEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::PlayPokerHandEvent` struct
export interface PlayPokerHandEvent {
    game_id: Number;
    level: Number;
    count_hand: Number;
    poker_hand: PokerHand;
    
}
export const PlayPokerHandEventDefinition = {
    game_id: RecsType.Number,
    level: RecsType.Number,
    count_hand: RecsType.Number,
    poker_hand: PokerHandDefinition,
    
};


// Type definition for `jokers_ls_mod::models::data::events::PlayWinGameEvent` struct
export interface PlayWinGameEvent {
    player: BigInt;
    game_id: Number;
    level: Number;
    player_score: Number;
    
}
export const PlayWinGameEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    level: RecsType.Number,
    player_score: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::PlayerAttack` struct
export interface PlayerAttack {
    player: BigInt;
    attack: Number;
    
}
export const PlayerAttackDefinition = {
    player: RecsType.BigInt,
    attack: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::beast::PlayerBeast` struct
export interface PlayerBeast {
    game_id: Number;
    energy: Number;
    
}
export const PlayerBeastDefinition = {
    game_id: RecsType.Number,
    energy: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::PlayerHealed` struct
export interface PlayerHealed {
    game_id: Number;
    potion_heal: Number;
    current_hp: Number;
    
}
export const PlayerHealedDefinition = {
    game_id: RecsType.Number,
    potion_heal: RecsType.Number,
    current_hp: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::PokerHandEvent` struct
export interface PokerHandEvent {
    player: BigInt;
    poker_hand: Number;
    multi: Number;
    points: Number;
    
}
export const PokerHandEventDefinition = {
    player: RecsType.BigInt,
    poker_hand: RecsType.Number,
    multi: RecsType.Number,
    points: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::status::game::rage::RageRound` struct
export interface RageRound {
    game_id: Number;
    is_active: Boolean;
    current_probability: Number;
    active_rage_ids: Number[];
    last_active_level: Number;
    
}
export const RageRoundDefinition = {
    game_id: RecsType.Number,
    is_active: RecsType.Boolean,
    current_probability: RecsType.Number,
    active_rage_ids: RecsType.NumberArray,
    last_active_level: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::reward::Reward` struct
export interface Reward {
    game_id: Number;
    rewards_ids: Number[];
    
}
export const RewardDefinition = {
    game_id: RecsType.Number,
    rewards_ids: RecsType.NumberArray,
    
};


// Type definition for `jokers_ls_mod::models::data::events::RoundScoreEvent` struct
export interface RoundScoreEvent {
    player: BigInt;
    game_id: Number;
    player_score: Number;
    
}
export const RoundScoreEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    player_score: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::SpecialCashEvent` struct
export interface SpecialCashEvent {
    player: BigInt;
    cash: Number;
    card_idx: Number;
    special_idx: Number;
    
}
export const SpecialCashEventDefinition = {
    player: RecsType.BigInt,
    cash: RecsType.Number,
    card_idx: RecsType.Number,
    special_idx: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::SpecialGlobalEvent` struct
export interface SpecialGlobalEvent {
    player: BigInt;
    game_id: Number;
    current_special_card_idx: Number;
    multi: Number;
    points: Number;
    
}
export const SpecialGlobalEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    current_special_card_idx: RecsType.Number,
    multi: RecsType.Number,
    points: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::SpecialModifierMultiEvent` struct
export interface SpecialModifierMultiEvent {
    player: BigInt;
    game_id: Number;
    current_special_card_idx: Number;
    current_hand_card_idx: Number;
    multi: Number;
    
}
export const SpecialModifierMultiEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    current_special_card_idx: RecsType.Number,
    current_hand_card_idx: RecsType.Number,
    multi: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::SpecialModifierPointsEvent` struct
export interface SpecialModifierPointsEvent {
    player: BigInt;
    game_id: Number;
    current_special_card_idx: Number;
    current_hand_card_idx: Number;
    points: Number;
    
}
export const SpecialModifierPointsEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    current_special_card_idx: RecsType.Number,
    current_hand_card_idx: RecsType.Number,
    points: RecsType.Number,
    
};


// Type definition for `jokers_ls_mod::models::data::events::SpecialModifierSuitEvent` struct
export interface SpecialModifierSuitEvent {
    player: BigInt;
    game_id: Number;
    current_special_card_idx: Number;
    current_hand_card_idx: Number;
    suit: Suit;
    
}
export const SpecialModifierSuitEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    current_special_card_idx: RecsType.Number,
    current_hand_card_idx: RecsType.Number,
    suit: SuitDefinition,
    
};


// Type definition for `jokers_ls_mod::models::data::events::SpecialPokerHandEvent` struct
export interface SpecialPokerHandEvent {
    player: BigInt;
    game_id: Number;
    current_special_card_idx: Number;
    multi: Number;
    points: Number;
    
}
export const SpecialPokerHandEventDefinition = {
    player: RecsType.BigInt,
    game_id: RecsType.Number,
    current_special_card_idx: RecsType.Number,
    multi: RecsType.Number,
    points: RecsType.Number,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `jokers_ls_mod::models::data::adventurer::AdventurerConsumed` model
        AdventurerConsumed: (() => {
            return defineComponent(
                world,
                {
                    adventurer_id: RecsType.Number,
                    owner: RecsType.BigInt,
                    consumed: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "AdventurerConsumed",
                        types: ["u32", "ContractAddress", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::beast::Beast` model
        Beast: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    beast_id: RecsType.Number,
                    tier: RecsType.Number,
                    level: RecsType.Number,
                    health: RecsType.Number,
                    current_health: RecsType.Number,
                    attack: RecsType.Number,
                    type_beast: RecsType.String,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "Beast",
                        types: ["u32", "u32", "u8", "u8", "u32", "u32", "u32", "TypeBeast"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::BeastAttack` model
        BeastAttack: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    attack: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "BeastAttack",
                        types: ["ContractAddress", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::status::shop::shop::BlisterPackItem` model
        BlisterPackItem: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    idx: RecsType.Number,
                    blister_pack_id: RecsType.Number,
                    cost: RecsType.Number,
                    purchased: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "BlisterPackItem",
                        types: ["u32", "u32", "u32", "u32", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::status::shop::shop::BlisterPackResult` model
        BlisterPackResult: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    cards_picked: RecsType.Boolean,
                    cards: RecsType.NumberArray,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "BlisterPackResult",
                        types: ["u32", "bool", "array"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::BuyBlisterPackEvent` model
        BuyBlisterPackEvent: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    level: RecsType.Number,
                    idx: RecsType.Number,
                    blister_pack_id: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "BuyBlisterPackEvent",
                        types: ["u32", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::BuyCardEvent` model
        BuyCardEvent: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    level: RecsType.Number,
                    idx: RecsType.Number,
                    item_type: RecsType.String,
                    card_id: RecsType.Number,
                    temporary: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "BuyCardEvent",
                        types: ["u32", "u32", "u32", "CardItemType", "u32", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::BuyPokerHandEvent` model
        BuyPokerHandEvent: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    level: RecsType.Number,
                    idx: RecsType.Number,
                    poker_hand: RecsType.String,
                    level_hand: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "BuyPokerHandEvent",
                        types: ["u32", "u32", "u32", "PokerHand", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::BuyRerollEvent` model
        BuyRerollEvent: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    level: RecsType.Number,
                    reroll_cost: RecsType.Number,
                    reroll_executed: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "BuyRerollEvent",
                        types: ["u32", "u32", "u32", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::status::shop::shop::CardItem` model
        CardItem: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    idx: RecsType.Number,
                    item_type: RecsType.String,
                    card_id: RecsType.Number,
                    cost: RecsType.Number,
                    purchased: RecsType.Boolean,
                    temporary: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "CardItem",
                        types: ["u32", "u32", "CardItemType", "u32", "u32", "bool", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::CardScoreEvent` model
        CardScoreEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    index: RecsType.Number,
                    multi: RecsType.Number,
                    points: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "CardScoreEvent",
                        types: ["ContractAddress", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::challenge::Challenge` model
        Challenge: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    active_ids: RecsType.StringArray,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "Challenge",
                        types: ["u32", "array"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::ChallengeCompleted` model
        ChallengeCompleted: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    player_name: RecsType.BigInt,
                    game_id: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "ChallengeCompleted",
                        types: ["ContractAddress", "felt252", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::challenge::ChallengePlayer` model
        ChallengePlayer: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    discards: RecsType.Number,
                    plays: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "ChallengePlayer",
                        types: ["u32", "u8", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::CreateGameEvent` model
        CreateGameEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "CreateGameEvent",
                        types: ["ContractAddress", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::status::round::current_hand_card::CurrentHandCard` model
        CurrentHandCard: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    idx: RecsType.Number,
                    card_id: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "CurrentHandCard",
                        types: ["u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::status::game::game::CurrentSpecialCards` model
        CurrentSpecialCards: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    idx: RecsType.Number,
                    effect_card_id: RecsType.Number,
                    is_temporary: RecsType.Boolean,
                    remaining: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "CurrentSpecialCards",
                        types: ["u32", "u32", "u32", "bool", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::game_deck::DeckCard` model
        DeckCard: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    index: RecsType.Number,
                    card_id: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "DeckCard",
                        types: ["u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::DetailEarnedEvent` model
        DetailEarnedEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    round_defeat: RecsType.Number,
                    level_bonus: RecsType.Number,
                    hands_left: RecsType.Number,
                    hands_left_cash: RecsType.Number,
                    discard_left: RecsType.Number,
                    discard_left_cash: RecsType.Number,
                    rage_card_defeated: RecsType.Number,
                    rage_card_defeated_cash: RecsType.Number,
                    total: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "DetailEarnedEvent",
                        types: ["ContractAddress", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::status::game::game::Game` model
        Game: (() => {
            return defineComponent(
                world,
                {
                    id: RecsType.Number,
                    owner: RecsType.BigInt,
                    player_name: RecsType.BigInt,
                    player_hp: RecsType.Number,
                    player_score: RecsType.Number,
                    player_level: RecsType.Number,
                    obstacles_cleared: RecsType.Number,
                    beasts_defeated: RecsType.Number,
                    current_player_hp: RecsType.Number,
                    max_hands: RecsType.Number,
                    max_discard: RecsType.Number,
                    max_jokers: RecsType.Number,
                    level: RecsType.Number,
                    len_hand: RecsType.Number,
                    len_max_current_special_cards: RecsType.Number,
                    len_current_special_cards: RecsType.Number,
                    current_jokers: RecsType.Number,
                    state: RecsType.String,
                    substate: RecsType.String,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "Game",
                        types: ["u32", "ContractAddress", "felt252", "u32", "u32", "u32", "u32", "u32", "u32", "u8", "u8", "u8", "u32", "u32", "u32", "u32", "u8", "GameState", "GameSubState"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::game_deck::GameDeck` model
        GameDeck: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    len: RecsType.Number,
                    round_len: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "GameDeck",
                        types: ["u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::beast::GameModeBeast` model
        GameModeBeast: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    cost_discard: RecsType.Number,
                    cost_play: RecsType.Number,
                    energy_max_player: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "GameModeBeast",
                        types: ["u32", "u8", "u8", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::ItemChallengeCompleted` model
        ItemChallengeCompleted: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    challenge_id: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "ItemChallengeCompleted",
                        types: ["u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::last_beast_level::LastBeastLevel` model
        LastBeastLevel: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    current_probability: RecsType.Number,
                    level: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "LastBeastLevel",
                        types: ["u32", "u16", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::ModifierCardSuitEvent` model
        ModifierCardSuitEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    modifier_card_idx: RecsType.Number,
                    current_hand_card_idx: RecsType.Number,
                    suit: RecsType.String,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "ModifierCardSuitEvent",
                        types: ["ContractAddress", "u32", "u32", "u32", "Suit"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::NeonPokerHandEvent` model
        NeonPokerHandEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    neon_cards_idx: RecsType.NumberArray,
                    multi: RecsType.Number,
                    points: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "NeonPokerHandEvent",
                        types: ["ContractAddress", "u32", "array", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::ObstacleAttack` model
        ObstacleAttack: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    attack: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "ObstacleAttack",
                        types: ["ContractAddress", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::PlayGameOverEvent` model
        PlayGameOverEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "PlayGameOverEvent",
                        types: ["ContractAddress", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::PlayPokerHandEvent` model
        PlayPokerHandEvent: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    level: RecsType.Number,
                    count_hand: RecsType.Number,
                    poker_hand: RecsType.String,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "PlayPokerHandEvent",
                        types: ["u32", "u32", "u8", "PokerHand"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::PlayWinGameEvent` model
        PlayWinGameEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    level: RecsType.Number,
                    player_score: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "PlayWinGameEvent",
                        types: ["ContractAddress", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::PlayerAttack` model
        PlayerAttack: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    attack: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "PlayerAttack",
                        types: ["ContractAddress", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::beast::PlayerBeast` model
        PlayerBeast: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    energy: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "PlayerBeast",
                        types: ["u32", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::PlayerHealed` model
        PlayerHealed: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    potion_heal: RecsType.Number,
                    current_hp: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "PlayerHealed",
                        types: ["u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::PokerHandEvent` model
        PokerHandEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    poker_hand: RecsType.Number,
                    multi: RecsType.Number,
                    points: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "PokerHandEvent",
                        types: ["ContractAddress", "u8", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::status::game::rage::RageRound` model
        RageRound: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    is_active: RecsType.Boolean,
                    current_probability: RecsType.Number,
                    active_rage_ids: RecsType.NumberArray,
                    last_active_level: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "RageRound",
                        types: ["u32", "bool", "u16", "array", "u8"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::reward::Reward` model
        Reward: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.Number,
                    rewards_ids: RecsType.NumberArray,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "Reward",
                        types: ["u32", "array"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::RoundScoreEvent` model
        RoundScoreEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    player_score: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "RoundScoreEvent",
                        types: ["ContractAddress", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::SpecialCashEvent` model
        SpecialCashEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    cash: RecsType.Number,
                    card_idx: RecsType.Number,
                    special_idx: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "SpecialCashEvent",
                        types: ["ContractAddress", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::SpecialGlobalEvent` model
        SpecialGlobalEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    current_special_card_idx: RecsType.Number,
                    multi: RecsType.Number,
                    points: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "SpecialGlobalEvent",
                        types: ["ContractAddress", "u32", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::SpecialModifierMultiEvent` model
        SpecialModifierMultiEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    current_special_card_idx: RecsType.Number,
                    current_hand_card_idx: RecsType.Number,
                    multi: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "SpecialModifierMultiEvent",
                        types: ["ContractAddress", "u32", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::SpecialModifierPointsEvent` model
        SpecialModifierPointsEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    current_special_card_idx: RecsType.Number,
                    current_hand_card_idx: RecsType.Number,
                    points: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "SpecialModifierPointsEvent",
                        types: ["ContractAddress", "u32", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::SpecialModifierSuitEvent` model
        SpecialModifierSuitEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    current_special_card_idx: RecsType.Number,
                    current_hand_card_idx: RecsType.Number,
                    suit: RecsType.String,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "SpecialModifierSuitEvent",
                        types: ["ContractAddress", "u32", "u32", "u32", "Suit"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `jokers_ls_mod::models::data::events::SpecialPokerHandEvent` model
        SpecialPokerHandEvent: (() => {
            return defineComponent(
                world,
                {
                    player: RecsType.BigInt,
                    game_id: RecsType.Number,
                    current_special_card_idx: RecsType.Number,
                    multi: RecsType.Number,
                    points: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "jokers_ls_mod",
                        name: "SpecialPokerHandEvent",
                        types: ["ContractAddress", "u32", "u32", "u32", "u32"],
                        customTypes: [],
                    },
                }
            );
        })(),
    };
}
